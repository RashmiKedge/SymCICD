AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation template to create resources required to run tasks on an
  ECS cluster.
Mappings:
  VpcCidrs:
    vpc:
      cidr: 10.0.0.0/16
    pubsubnet1:
      cidr: 10.0.0.0/24
    pubsubnet2:
      cidr: 10.0.1.0/24
  AWSRegionToAMI:
    ap-southeast-1:
      AMIID: ami-438b2f20
    ap-southeast-2:
      AMIID: ami-862211e5
Parameters:
  EcsInstanceType:
    Type: String
    Description: ECS EC2 instance type
    Default: t3.medium
    AllowedValues:
      - t1.micro
      - t2.micro
      - t3.micro
      - t3.medium
    ConstraintDescription: must be a valid EC2 instance type.
  KeyName:
    Type: 'AWS::EC2::KeyPair::KeyName'
    Description: >-
      Optional - Name of an existing EC2 KeyPair to enable SSH access to the ECS
      instances
    Default: ''
  VpcId:
    Type: String
    Description: Optional - VPC Id of existing VPC. Leave blank to have a new VPC created
    Default: ''
    AllowedPattern: '^(?:vpc-[0-9a-f]{8}|)$'
    ConstraintDescription: VPC Id must begin with 'vpc-' or leave blank to have a new VPC created
  SubnetIds:
    Type: CommaDelimitedList
    Description: >-
      Optional - Comma separated list of two (2) existing VPC Subnet Ids where
      ECS instances will run.  Required if setting VpcId.
    Default: ''
  AsgMaxSize:
    Type: Number
    Description: Maximum size and initial Desired Capacity of ECS Auto Scaling Group
    Default: '1'
  SecurityGroup:
    Type: String
    Description: >-
      Optional - Existing security group to associate the container instances.
      Creates one by default.
    Default: ''
  SourceCidr:
    Type: String
    Description: Optional - CIDR/IP range for EcsPort - defaults to 0.0.0.0/0
    Default: 0.0.0.0/0
  EcsPort:
    Type: String
    Description: >-
      Optional - Security Group port to open on ECS instances - defaults to port
      80
    Default: '80'
  VpcAvailabilityZones:
    Type: CommaDelimitedList
    Description: >-
      Optional - Comma-delimited list of VPC availability zones in which to
      create subnets.  Required if setting VpcId.
    Default: ''
  EcsCluster:
    Type: String
    Description: ECS Cluster Name
    Default: DefaultEcsCluster
Conditions:
  CreateVpcResources: !Equals
    - !Ref VpcId
    - ''
  CreateSecurityGroup: !Equals
    - !Ref SecurityGroup
    - ''
  CreateEC2LCWithKeyPair: !Not
    - !Equals
      - !Ref KeyName
      - ''
  CreateEC2LCWithoutKeyPair: !Equals
    - !Ref KeyName
    - ''
  UseSpecifiedVpcAvailabilityZones: !Not
    - !Equals
      - !Join
        - ''
        - !Ref VpcAvailabilityZones
      - ''
Resources:
  Vpc:
    Condition: CreateVpcResources
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !FindInMap
        - VpcCidrs
        - vpc
        - cidr
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
  PubSubnetAz1:
    Condition: CreateVpcResources
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !FindInMap
        - VpcCidrs
        - pubsubnet1
        - cidr
      MapPublicIpOnLaunch: 'true'
      AvailabilityZone: !If
        - UseSpecifiedVpcAvailabilityZones
        - !Select
          - '0'
          - !Ref VpcAvailabilityZones
        - !Select
          - '0'
          - !GetAZs
            Ref: 'AWS::Region'
  PubSubnetAz2:
    Condition: CreateVpcResources
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !FindInMap
        - VpcCidrs
        - pubsubnet2
        - cidr
      MapPublicIpOnLaunch: 'true'
      AvailabilityZone: !If
        - UseSpecifiedVpcAvailabilityZones
        - !Select
          - '1'
          - !Ref VpcAvailabilityZones
        - !Select
          - '1'
          - !GetAZs
            Ref: 'AWS::Region'
  InternetGateway:
    Condition: CreateVpcResources
    Type: 'AWS::EC2::InternetGateway'
  AttachGateway:
    Condition: CreateVpcResources
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway
  RouteViaIgw:
    Condition: CreateVpcResources
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref Vpc
  PublicRouteViaIgw:
    Condition: CreateVpcResources
    DependsOn: AttachGateway
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref RouteViaIgw
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PubSubnet1RouteTableAssociation:
    Condition: CreateVpcResources
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PubSubnetAz1
      RouteTableId: !Ref RouteViaIgw
  PubSubnet2RouteTableAssociation:
    Condition: CreateVpcResources
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PubSubnetAz2
      RouteTableId: !Ref RouteViaIgw
  EcsClusterResource:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: !Ref EcsCluster
  EcsSecurityGroup:
    Condition: CreateSecurityGroup
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: ECS Allowed Ports
      VpcId: !If
        - CreateVpcResources
        - !Ref Vpc
        - !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref EcsPort
          ToPort: !Ref EcsPort
          CidrIp: !Ref SourceCidr
  EcsInstancePolicy:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - >-
          arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
  EcsInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref EcsInstancePolicy
  EcsInstanceLc:
    Condition: CreateEC2LCWithKeyPair
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId: !FindInMap
        - AWSRegionToAMI
        - !Ref 'AWS::Region'
        - AMIID
      InstanceType: !Ref EcsInstanceType
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref EcsInstanceProfile
      KeyName: !Ref KeyName
      SecurityGroups: !If
        - CreateSecurityGroup
        - - !Ref EcsSecurityGroup
        - - !Ref SecurityGroup
      UserData: !Base64
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash
            - echo ECS_CLUSTER=
            - !Ref EcsCluster
            - |2
               >> /etc/ecs/ecs.config
  EcsInstanceLcWithoutKeyPair:
    Condition: CreateEC2LCWithoutKeyPair
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId: !FindInMap
        - AWSRegionToAMI
        - !Ref 'AWS::Region'
        - AMIID
      InstanceType: !Ref EcsInstanceType
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref EcsInstanceProfile
      SecurityGroups: !If
        - CreateSecurityGroup
        - - !Ref EcsSecurityGroup
        - - !Ref SecurityGroup
      UserData: !Base64
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash
            - echo ECS_CLUSTER=
            - !Ref EcsCluster
            - |2
               >> /etc/ecs/ecs.config
  EcsInstanceAsg:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      VPCZoneIdentifier: !If
        - CreateVpcResources
        - - !Join
            - ','
            - - !Ref PubSubnetAz1
              - !Ref PubSubnetAz2
        - !Ref SubnetIds
      LaunchConfigurationName: !If
        - CreateEC2LCWithKeyPair
        - !Ref EcsInstanceLc
        - !Ref EcsInstanceLcWithoutKeyPair
      MinSize: '1'
      MaxSize: !Ref AsgMaxSize
      DesiredCapacity: !Ref AsgMaxSize
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - 'ECS Instance - '
              - !Ref 'AWS::StackName'
          PropagateAtLaunch: 'true'
Outputs:
  VpcId:
    Description: The VPC ID of the VPC
    Value: !Ref Vpc
    Export:
      Name: !Sub '${AWS::StackName}-VPCID'
  KeyName:
    Description: The name of SSH key
    Value: !Ref KeyName
    Export:
      Name: !Sub '${AWS::StackName}-KeyName'
  SubnetA:
    Description: The ID of subnet A
    Value: !Ref PubSubnetAz1
    Export:
      Name: !Sub '${AWS::StackName}-SubnetA'
  SubnetB:
    Description: The ID of subnet B
    Value: !Ref PubSubnetAz2
    Export:
      Name: !Sub '${AWS::StackName}-SubnetB'
  AvailabilityZone1:
    Description: AZ 1
    Value: !GetAtt
      - PubSubnetAz1
      - AvailabilityZone
    Export:
      Name: !Sub '${AWS::StackName}-AZ1'
  AvailabilityZone2:
    Description: AZ 2
    Value: !GetAtt
      - PubSubnetAz2
      - AvailabilityZone
    Export:
      Name: !Sub '${AWS::StackName}-AZ2'
